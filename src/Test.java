import java.util.Random;

public class Test {

    /*
    План занятия
    1) Классы
    2) Массивы
    3) Базовые алгоритмы работы с классами и массивами
     */

    /*
    Теория
    ООП - объектно-ориентированное программирование, подразумевает работу с типом данных
    Тип - шаблон для экземпляров(объектов) этого типа. В Java типы создаются при помощи классов
    В ООП есть 4 базовых принципа:

    1) Инкапсуляция - защита данных - "погружение в капсулу" - в класс данных и указание уровня доступа к ним.
    Инкапсуляция(Encapsulation) имеет 4 уровня в Java:
    private      - Доступ только внутри класса
    default      - Доступ в пределах пакета
    protected    - Доступ в пределах пакета и в классах наследниках
    public       - Доступ везде

    2) Полиморфизм(Polymorphism) - "Многоформие". Возможность создавать методы с одинаковым названием, но с разным набором параметров
    Пример:
    Калькулятор - нужно сложить два значения типа int и double в методах sum:
    1) public int sum(int a, int b){
       return a + b;
      }
    2) public double sum(double a, double b){
       return a + b;
       }

    3) Наследование(Inheritance) - Это возможность передать функционал от класса к другим классам

    В Java существует класс Object - это класс родитель для всех Java классов(неявное наследования). Это сделано для
    того, чтобы обеспечить наличие определенного функционала у каждого Java класса

   4) Абстракция - описание в коде какого-то предмета реального мира, с теми параметрами, которые нужны в данной программе

   Методы - блок кода, который выполняет определенную задачу. Методы бывают:
   void(процедура) - делает задачу и возвращает управление программой в точку вызова. Если написано void - это значит, что
   метод только выполняет действия и ничего в точку вызова не возвращает
   типизированный(функция) - делает задачу и возвращает управление с значением заданного типа в точку вызова
   конструктор - метод, который создает объект

   Чтобы создать метод, нужно написать его сигнатуру - первая строчка метода и задатьь его тело в фигурных скобках {}

  public void display(){   - сигнатура метода
   тело метода
  }

    Внутри метода нельзя определять тело другого метода !!!

    Массив - структура данных, которая хранит переменные.
    Чтобы создать массив, указываю такую конструкцию:
    тип[] название = new тип[Размер];
    int[] numbers = new int[10];
    double[] doubles = new double[20];

    Доступ к элементу массива можно получить через его позицию(индекс), например:
    numbers[5] - даст доступ к 6 элементу массива numbers, к 6 потому что счет начинается с нуля

    Для перебора массива(итерации) используются циклы


     */



    /*
    Заметки
    += - означет прибавить значение после оператора к переменной, например:
    int a = 5;
    a +=2; сделает a равной 7

     */

    /*
    Задачи со звездочкой
    1) Своя реализация ArrayList с обобщениями
    2) Добавить свои исключения
    3) Сделать общий класс для обработки списков и массивов(ArrayList и LinkedList)
     */


    static int[] array = new int[10];
    static Random random = new Random();
    public static void main(String[] args)  {                      // Главный метод. Точка входа
        int summary = sum(2, 5);                                  // В точку вызова метод вернул значение, потому что он не void
        for(int i = 0; i < array.length; i++){
            array[i] = random.nextInt(10);                        // Присваиваем значения элементам массива
        }
        display();                                                // Точка вызова метода

        int sum = summarize();                                    // Запомнили в переменную сумму всех элементов
        System.out.println("Сумма элементов массива: " + sum);
        System.out.println("Сгенерировали новый массив: ");
        randomize();
        display();
        ArrayWorking array = new ArrayWorking();                  // Создаем объект для работы с массивом
        array.insert(3);                                          // Вставляем элементы в массив
        array.insert(8);
        System.out.println(array.toString());                     // Выводим элементы на консоль
      



    }

    public static void randomize(){
        for (int i = 0; i < array.length; i++) {                  // Перебираем весь массив в цикле
            array[i] = random.nextInt(10);                        // Присваиваю каждому элементу случайное число
        }
    }

    public static int summarize(){
        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        return sum;
    }

    public static void display(){
        for (int i = 0; i < array.length; i++){
            System.out.println(array[i]);
        }
    }

    public static int sum(int a, int b){
        return a+b;
    }


}
